version: '3.8'

services:
  # MySQL Database
  database:
    image: mysql:8.0
    container_name: ai-chat-db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: db_AIchatbot
      MYSQL_ROOT_PASSWORD: 1111
      MYSQL_USER: chatai
      MYSQL_PASSWORD: chatai123
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - ai-chat-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 30s
      start_period: 30s

  # Spring Boot Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai-chat-backend
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    environment:
      # Database Configuration
      DB_HOST: database
      DB_PORT: 3306
      DB_NAME: db_AIchatbot
      DB_USERNAME: root
      DB_PASSWORD: 1111
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-ZettixTeamAIChatSecretKeyForJWTTokenGenerationVeryLongAndSecure2024}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-86400000}
      
      # Groq API Configuration
      GROQ_API_KEY: ${GROQ_API_KEY:-your-groq-api-key-here}
      
      # Spring Profile
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-default}
      
      # Java Options
      JAVA_OPTS: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=80.0"
    ports:
      - "8081:8080"
    volumes:
      - backend_logs:/app/logs
    networks:
      - ai-chat-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 60s

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai-chat-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      # API Configuration
      REACT_APP_API_BASE_URL: ${REACT_APP_API_BASE_URL:-http://localhost:8081/api}
      REACT_APP_WS_BASE_URL: ${REACT_APP_WS_BASE_URL:-ws://localhost:8081}
      REACT_APP_NAME: ${REACT_APP_NAME:-AI Chat}
      REACT_APP_VERSION: ${REACT_APP_VERSION:-1.0.0}
      GENERATE_SOURCEMAP: ${GENERATE_SOURCEMAP:-false}
    ports:
      - "3005:3005"
    networks:
      - ai-chat-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 30s

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: ai-chat-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-chat-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5
      interval: 30s

  # Nginx Load Balancer (optional for production)
  nginx:
    image: nginx:1.25-alpine
    container_name: ai-chat-nginx
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - ai-chat-network
    profiles:
      - production

volumes:
  mysql_data:
    driver: local
  backend_logs:
    driver: local
  redis_data:
    driver: local

networks:
  ai-chat-network:
    driver: bridge
